db
	代表当前的数据库。

db.help()
	显示数据库相关的一些可用函数信息

db.serverStatus()
	返回由数据库进程的一些状态信息组成的文档

db.collection
	当前数据库的指定集合
	
db.collection.help()
	显示集合相关的一些可用函数信息

db.myCollection.find()
	获取myCollection集合中的所有数据，默认打印前20个，键入it获取更多的20个。

db.myCollection.find().pretty()
	以JSON格式化的方式输出数据。	


-- 查询相关

-- 查询全部数据
SQL
	select * from inventory;
mongo shell
	db.inventory.find()
-- 在命令行上，每次显示行数
DBQuery.shellBatchSize = 10;


-- 条件查询
SQL
	select * from inventory t where t.status = "D"
mongo shell
	db.inventory.find({status : "D"})

-- in 查询
SQL
	select * from inventory t where t.status in ("A","D")
mongo shell
	db.inventory.find({status : {$in : ["A","D"]}})

-- and 查询
SQL
	select * from inventory t where t.status = "A" and t.qty < 30
mongo
	db.inventory.find({status : "A", qty : {$lt : 30}})

-- or 查询
SQL	
	select * from inventory t where t.status = "A" or t.qty < 30
mongo shell
	db.inventory.find({$or : [{stauts : "A"},{qty : {$lt : 30}}]})

-- and 和 or 共用
SQL
	select * from inventory t where t.status = "A" and (qty < 30 or item like "p%")
mongo shell
	db.inventory.find({
		status : "A", 
		$or : [{qty : {$lt : 30}},{item : /^p/}]
	})

-- 根据嵌套文档查询
db.inventory.find({size : {h : 14, w : 21, uom : "cm"}})
注意：根据嵌套文档查询必须是精确匹配嵌套文档，包括元素的顺序和个数。

-- 根据嵌套文档内的字段查询
db.inventory.find({"size.uom" : "in"})


-- 针对数组的查询。
db.inventory.insertMany([
   { item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] },
   { item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
   { item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
   { item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
   { item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }
]);
-- 精确匹配数组，只会查出第二条
db.inventory.find({
	tags : ["blank", "red"]
})

-- 非精确查询，至少有一个元素可以和给定值匹配上。查询tags中含有red或blank元素的，不需要匹配顺序和数组内元素个数，也不需要完全匹配两个元素。
db.inventory.find({
	tags : {$all : ["red", "blank"]}
})

-- 配合操作器查询数组。
-- dim_cm数组中至少包含一个小于15的元素的文档
db.inventory.find({
	dim_cm : {$lt : 15}
})
-- dim_cm数组中至少包含一个大于15或小于25的元素的文档，不需要某个元素同时满足大于15并且小于25。
db.inventory.find({
	dim_cm : {$gt : 15, $lt : 25}
})
-- dim_cm数组中至少包含一个大于15并且小于25的元素的文档，该元素必须同时满足大于15且小于25。
db.inventory.find({
	dim_cm : {$elemMatch : {$gt : 15, $lt : 25}}
})
-- 根据数组的下标锁定元素并且做筛选。下标从0开始。
db.inventory.find({
	"dim_cm.1" {$gt : 25}
})
-- 根据数组的长度筛选文档
db.inventory.find({
	"tags" : {$size : 3}
})


-- 查询数组内嵌文档。
-- 数据准备
db.inventory.insertMany( [
   { item: "journal", instock: [ { warehouse: "A", qty: 5 }, { warehouse: "C", qty: 15 } ] },
   { item: "notebook", instock: [ { warehouse: "C", qty: 5 } ] },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 } ] },
   { item: "planner", instock: [ { warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 } ] },
   { item: "postcard", instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
]);

-- 精确匹配：匹配元素和顺序。
db.inventory.find({
	"instock" : {warehouse : "A",qty : 5}
})

-- 文档内数据的内嵌文档的某个元素满足指定的条件。文档和文档内元素用"."连接。
db.inventory.find({
	"instock.qty" : {$lte : 20}
})

-- instock数组的内嵌文档至少有一个文档同时满足qty=5并且warehouse=A
db.inventory.find( { 
	"instock": { $elemMatch: { qty: 5, warehouse: "A" } } 
} )
-- instock数组的内嵌文档至少有一个文档同时满足10<qty<=20
db.inventory.find( { "instock": { $elemMatch: { qty: { $gt: 10, $lte: 20 } } } } )
-- instock数组的内嵌文档至少有一个文档满足qty>10或qty<=20
db.inventory.find( {
	"instock.qty" : {$gt: 10, $lte: 20}
} )
-- instock数组至少有一个内嵌文档包含qty=5，并且至少有一个内嵌文档（不必是符合前一个条件的文档）包含warehouse=A
db.inventory.find( 
	{"instock.qty": 5, "instock.warehouse": "A"}
)




-- 更新文档
-- 数据准备
db.inventory.insertMany([
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" }
]);

-- 更新集合中匹配到给定条件的第一个文档
db.collection.updateOne(
	<filter>,
	<update>,
	{
		upsert : <boolean>	-- 为true时，如果不存在则插入
	}
)

-- eg:
db.inventory.updateOne(
	{item : "memeda"},
	{$inc : {qty : 1}},
	{upsert : true}
)

-- 更新集合中匹配到给定条件的所有文档
db.collection.updateMany(
	<filter>,
	<update>,
	{
		upsert : <boolean>	-- 为true时，如果不存在则插入
	}
)
-- eg:
db.inventory.updateMany(
	{item : {$in : ["paper","memeda"]}},
	{$set : {qty : 50}},
	{upsert : true}
)

-- 替换集合中匹配到给定条件的第一个文档
db.collection.replaceOne(
   <filter>,				-- 过滤条件
   <replacement>,			-- 更换成该文档
   {
     upsert: <boolean>		-- 为true时，如果不存在则插入
   }
)
-- eg:
db.inventory.replaceOne( 
	{item : "paper"}, {item : "paperr", qty : 150,"size" : {"h":22,"w" :22,"uom" : "cn"},"status" : "G"} 
)

-- 更改一个或多个匹配到的文档，该方法可以更新一个已经存在的文档中的给定字段，或者替换整个匹配到的文档。默认情况下只更新单个文档，如果需要更新多个文档，需要设置multi参数值为true。
db.collection.update(
	<query>,
	<upate>,
	{
		upsert : <boolean>, 	-- 为true时，如果不存在则插入；
		multi : <boolean>	--为true时，更新匹配到的全部文档，false时更新匹配到的第一个文档。默认false。
	}
)
-- eg，数据准备：
db.books.insert( { 
	_id : 1, 
	item : "TBD", 
	stock : 0, 
	info : {publisher : "1111",pages : 430},
	tags : ["technology","computer"], 
	ratings : [{by : "ijk",rating : 4},{by : "lmn",rating : 5}],
	reorder : false 
})
-- 更新匹配到给定条件的第一个文档：
db.books.update(
   { _id: 1 },
   {
     $inc: { stock: 5 },
     $set: {
       item: "ABC123",
       "info.publisher": "2222",
       tags: [ "software" ],
       "ratings.1": { by: "xyz", rating: 3 }
     }
   }
)
-- 替换匹配到给定条件的第一个文档，更新以后，原文档中的字段仅保留_id：
db.books.update(
	{item : "ABC123"},
	{
		item : "XYZ123",
		stock : 10,
		info : {publisher : "2255",pages :150},
		tags : ["baking","cooking"]
	}
)
-- 如果不存在则插入
db.books.update(
   { item: "ZZZ135" },
   {
     item: "ZZZ135",
     stock: 5,
     tags: [ "database" ]
   },
   { upsert: true }
)
-- 更新多个文档：
db.books.update(
	{stock : {$lte : 10}},
	{$set : {reorder : true}},
	{multi : true}
)

-- 更新多个文档和如果不存在则插入联合使用：
-- 数据准备
db.books.insertMany([
	{
	  _id: 5,
	  item: "EFG222",
	  stock: 18,
	  info: { publisher: "0000", pages: 70 },
	  reorder: true
	},
	{
	  _id: 6,
	  item: "EFG222",
	  stock: 15,
	  info: { publisher: "1111", pages: 72 },
	  reorder: true
	}
])
-- 如果不存在则插入：


-- 删除相关命令
db.inventory.deleteOne({stauts : "A"})
	删除集合中匹配到status=A的文档，如果在集合中有多个status=A的文档，只删除匹配到的第一个文档。
db.inventory.deleteMany({status : "A"})
	删除集合中匹配到status=A的所有文档。
db.inventory.deleteMany({})
	删除集合中所有的文档。   
备注：删除命令中的条件中也可以使用查询相关的筛选条件。
