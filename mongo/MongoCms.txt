db
	代表当前的数据库。

db.collection
	当前数据库的指定集合

db.myCollection.find()
	获取myCollection集合中的所有数据，默认打印前20个，键入it获取更多的20个。

db.myCollection.find().pretty()
	以JSON格式化的方式输出数据。	


-- 查询相关

-- 查询全部数据
SQL
	select * from inventory;
mongo shell
	db.inventory.find()

-- 条件查询
SQL
	select * from inventory t where t.status = "D"
mongo shell
	db.inventory.find({status : "D"})

-- in 查询
SQL
	select * from inventory t where t.status in ("A","D")
mongo shell
	db.inventory.find({status : {$in : ["A","D"]}})

-- and 查询
SQL
	select * from inventory t where t.status = "A" and t.qty < 30
mongo
	db.inventory.find({status : "A", qty : {$lt : 30}})

-- or 查询
SQL	
	select * from inventory t where t.status = "A" or t.qty < 30
mongo shell
	db.inventory.find({$or : [{stauts : "A"},{qty : {$lt : 30}}]})

-- and 和 or 共用
SQL
	select * from inventory t where t.status = "A" and (qty < 30 or item like "p%")
mongo shell
	db.inventory.find({
		status : "A", 
		$or : [{qty : {$lt : 30}},{item : /^p/}]
	})

-- 根据嵌套文档查询
db.inventory.find({size : {h : 14, w : 21, uom : "cm"}})
注意：根据嵌套文档查询必须是精确匹配嵌套文档，包括元素的顺序和个数。

-- 根据嵌套文档内的字段查询
db.inventory.find({"size.uom" : "in"})


-- 针对数组的查询。
db.inventory.insertMany([
   { item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] },
   { item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
   { item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
   { item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
   { item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }
]);
-- 精确匹配数组，只会查出第二条
db.inventory.find({
	tags : ["blank", "red"]
})

-- 非精确查询，至少有一个元素可以和给定值匹配上。查询tags中含有red或blank元素的，不需要匹配顺序和数组内元素个数，也不需要完全匹配两个元素。
db.inventory.find({
	tags : {$all : ["red", "blank"]}
})

-- 配合操作器查询数组。
-- dim_cm数组中至少包含一个小于15的元素的文档
db.inventory.find({
	dim_cm : {$lt : 15}
})
-- dim_cm数组中至少包含一个大于15或小于25的元素的文档，不需要某个元素同时满足大于15并且小于25。
db.inventory.find({
	dim_cm : {$gt : 15, $lt : 25}
})
-- dim_cm数组中至少包含一个大于15并且小于25的元素的文档，该元素必须同时满足大于15且小于25。
db.inventory.find({
	dim_cm : {$elemMatch : {$gt : 15, $lt : 25}}
})
-- 根据数组的下标锁定元素并且做筛选。下标从0开始。
db.inventory.find({
	"dim_cm.1" {$gt : 25}
})
-- 根据数组的长度筛选文档
db.inventory.find({
	"tags" : {$size : 3}
})


-- 查询数组内嵌文档。
-- 数据准备
db.inventory.insertMany( [
   { item: "journal", instock: [ { warehouse: "A", qty: 5 }, { warehouse: "C", qty: 15 } ] },
   { item: "notebook", instock: [ { warehouse: "C", qty: 5 } ] },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 } ] },
   { item: "planner", instock: [ { warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 } ] },
   { item: "postcard", instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
]);

-- 精确匹配：匹配元素和顺序。
db.inventory.find({
	"instock" : {warehouse : "A",qty : 5}
})

-- 文档内数据的内嵌文档的某个元素满足指定的条件。文档和文档内元素用"."连接。
db.inventory.find({
	"instock.qty" : {$lte : 20}
})

-- instock数组的内嵌文档至少有一个文档同时满足qty=5并且warehouse=A
db.inventory.find( { 
	"instock": { $elemMatch: { qty: 5, warehouse: "A" } } 
} )
-- instock数组的内嵌文档至少有一个文档同时满足10<qty<=20
db.inventory.find( { "instock": { $elemMatch: { qty: { $gt: 10, $lte: 20 } } } } )
-- instock数组的内嵌文档至少有一个文档满足qty>10或qty<=20
db.inventory.find( {
	"instock.qty" : {$gt: 10, $lte: 20}
} )
-- instock数组至少有一个内嵌文档包含qty=5，并且至少有一个内嵌文档（不必是符合前一个条件的文档）包含warehouse=A。
db.inventory.find( { 
	"instock.qty": 5, "instock.warehouse": "A"
} )



-- 删除相关命令
db.inventory.deleteOne({stauts : "A"})
	删除集合中匹配到status=A的文档，如果在集合中有多个status=A的文档，只删除匹配到的第一个文档。
db.inventory.deleteMany({status : "A"})
	删除集合中匹配到status=A的所有文档。
db.inventory.deleteMany({})
	删除集合中所有的文档。   
备注：删除命令中的条件中也可以使用查询相关的筛选条件。
