1.MongoDB的概念：
MongoDB是一个面向文档(document-oriented)的非关系型数据库。与关系型数据库相比，面向文档的数据库不再有“行”(row)的概念，取而代之的是“文档”(document)模型。通过在文档中嵌入文档和数组，面向文档的方法能够仅使用一条记录来表现复杂的层次关系，和面向对象语言对数据的看法类似。
2.文档的概念：
文档是MongoDB的核心概念之一。文档就是键值对的一个有序集。类似于关系型数据库中的行。例如:
{"greeting" : "hello world"}
3.集合(collection)的概念：
集合可以看做是一个拥有动态模式(dynamic schema)的表。类似于关系型数据库中的表。集合的动态模式是指一个集合里的文档可以是各式各样的。比如两个键不相同、值类型不同的文档可以放在同一个集合中：
{"greeting" : "hello world"}
{"foo" : 5}
最好不要这么做，难以维护性能也不高。并且一个集合里只放入一种类型的文档可以更好地对集合进行索引。
4.数据库(database)概念：
MongoDB的一个实例可以有多个相互独立的数据库(database)。类似于关系型数据库中的数据库。order_sytstem。
可以认为：一个MongoDB实例可以有多个数据库，每个数据库可以有多个集合，每个集合里可以有多个文档。注意：每一个文档都有一个特殊的键"_id"，这个在该文档所属的集合中是唯一的，如果你在插入文档的时候没有指定"_id"，系统会自动创建一个。


MongoDB文档值的数据类型：
1.null：表示空值或者不存在的字段。
{"x" : null}
2.布尔值：只有true和false。
{"x" : true}
3.数值：MongoDB默认使用64为浮点型数值，也支持整型值。
{"x" : 3.14} 或 {"x" : 3} 或 {"x" : NumberInt("3")} 或 {"x" : NumberLong("3")}
4.字符串：UTF-8字符串。
{"x" : "foobar"}
5.日期：被存储为自新纪元以来经过的毫秒数。
{"x" : new Date()}
6.数组：
{"x" : ["a", "b", "c"]}
7.内嵌文档：文档可以嵌套其他文档，被嵌套的文档可以认为是父文档的值。
{"x" : {"foo" : "bar"}}
8.对象ID：对象ID是一个12字节的ID，文档的唯一标识。
{"x" : ObjectId()}
9.二进制数据：如果想把非UTF-8的字符串保存的数据库中，可以选用该方式。
10.代码片段；
11.正则表达式：查询时，可以使用正则表达式作为限定条件，语法和JavaScript的正则表达式相同。
{"x" : /foobar/i}



注意事项：
1.创建.mongorc.js文件。如果某些脚本需要频繁加载，可以将它们添加到.mongorc.js中，这个文件保存在用户主目录下。常见用途：欢迎语和提示；移除比较危险的shell辅助函数。
2.MongoDB的更新比较慢，特别是更新前后的value值字段宽度有变化。