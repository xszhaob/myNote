


第九章：单元测试
	9.1 TDD三大定律：
		定律一 在编写不能通过的单元测试前，不可编写生产代码。
		定律二 只可编写刚好无法通过的单元测试，不能编译也算不通过。
		定律三 只可编写刚好足以通过当前失败测试的生产代码。
	9.2 保持测试代码整洁
		测试代码和生产代码一样重要。他可不是二等公民。它需要被思考、被设计和被照料。它该像生产代码一般保持整洁。
		测试越脏，就越难修改。测试代码越缠结，你就越有可能花更多时间塞进新测试，而不是编写新生产代码。修改生产代码后，旧测试就会开始失败，而测试代码中乱七八糟的东西将阻碍代码再次通过。
		测试代码越脏，代码就会变得越脏。
	9.3 整洁的测试代码
		整洁的测试代码有三要素：可读性，可读性和可读性。和其他代码一样：明确，简洁，还有足够的表达力。
		每个测试都要清晰地拆为三个环节。第一个环节构造测试数据，第二个环节操作测试数据，第三个环节检验操作是否得到期望的效果。
	9.4 每个测试方法一个断言
		最好的测试时单个测试中的断言数量应该是最小化。
	9.5 F.I.R.S.T
		快速(Fast) 测试代码应该运行的足够快。
		独立(Independent) 测试应该相互独立。某个测试不应为下个测试设定条件。
		可重复(Repeatable) 测试应当可在任何环境中重复通过。
		自足验证(Self-Validating) 测试应该有布尔值输出。无论是否通过测试，你不应该查看日志文件来确认测试是否通过。
		及时(Timely) 测试应及时编写。单元测试应该恰好在使其通过的生产代码之前编写。
	对于项目的健康度，测试代码同等重要。或许测试更重要，因为它保证和增强了生产代码的可扩展性、可维护性和可复用性。所以，必须要保持测试代码的整洁。让测试代码具有表达力并短小精悍。